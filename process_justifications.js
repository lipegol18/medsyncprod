import fs from 'fs';

// Ler arquivo CSV
const csvContent = fs.readFileSync('attached_assets/Book2_1753569716085.csv', 'utf-8');
const lines = csvContent.split('\n');
const justificativas = [];

// Processar cada linha (pular cabe√ßalho)
let currentJustification = '';
let insideQuotes = false;

for (let i = 1; i < lines.length; i++) {
    const line = lines[i].trim();
    if (!line) continue;
    
    // Verificar se a linha come√ßa com aspas
    if (line.startsWith('"') && !insideQuotes) {
        insideQuotes = true;
        currentJustification = line.substring(1); // Remove aspas iniciais
    } else if (insideQuotes) {
        currentJustification += ' ' + line;
    }
    
    // Verificar se a linha termina com aspas
    if (line.endsWith('"') && insideQuotes) {
        insideQuotes = false;
        // Remove aspas finais e adiciona √† lista
        currentJustification = currentJustification.slice(0, -1);
        if (currentJustification.trim()) {
            justificativas.push(currentJustification.trim());
        }
        currentJustification = '';
    }
}

console.log(`Total de justificativas processadas: ${justificativas.length}`);

// Analisar e classificar as justificativas
function classificarJustificativa(texto) {
    const textoLower = texto.toLowerCase();
    
    if (textoLower.includes('manguito rotador') && textoLower.includes('artrosc√≥p')) {
        return { categoria: 'Reparo Manguito Rotador', conduta: 'Artroscopia' };
    } else if (textoLower.includes('manguito rotador') && textoLower.includes('aberta')) {
        return { categoria: 'Reparo Manguito Rotador', conduta: 'Cirurgia Aberta' };
    } else if (textoLower.includes('infiltra√ß√£o') && textoLower.includes('bloqueio')) {
        return { categoria: 'Infiltra√ß√£o e Bloqueio', conduta: 'Bloqueio - Guiado por USG' };
    } else if (textoLower.includes('luxa√ß√£o glenoumeral') && textoLower.includes('artrosc√≥p')) {
        return { categoria: 'Luxa√ß√£o Glenoumeral', conduta: 'Artroscopia' };
    } else if (textoLower.includes('latarjet') || textoLower.includes('bristow')) {
        return { categoria: 'Luxa√ß√£o Glenoumeral', conduta: 'Latarjet' };
    } else if (textoLower.includes('acromioclavicular') || textoLower.includes('lac grau')) {
        return { categoria: 'Luxa√ß√£o Acr√¥mio-Clavicular', conduta: 'LAC' };
    } else if (textoLower.includes('artroplastia reversa')) {
        if (textoLower.includes('fratura')) {
            return { categoria: 'Artroplastia Reversa', conduta: 'Fratura' };
        } else if (textoLower.includes('revis√£o') || textoLower.includes('falha')) {
            return { categoria: 'Artroplastia Reversa', conduta: 'Revis√£o' };
        } else {
            return { categoria: 'Artroplastia Reversa', conduta: 'Artroplastia' };
        }
    } else if (textoLower.includes('fratura da esc√°pula') || textoLower.includes('esc√°pula')) {
        return { categoria: 'Fratura da Esc√°pula', conduta: 'Osteoss√≠ntese' };
    } else if (textoLower.includes('fratura') && textoLower.includes('clav√≠cula')) {
        return { categoria: 'Fratura da Clav√≠cula', conduta: 'Osteoss√≠ntese' };
    } else if (textoLower.includes('fratura') && textoLower.includes('corac√≥ide')) {
        return { categoria: 'Fratura do Corac√≥ide', conduta: 'Osteoss√≠ntese' };
    } else if (textoLower.includes('√∫mero proximal')) {
        return { categoria: 'Fratura Extremidade Proximal √ömero', conduta: 'Placa e Parafusos' };
    } else if (textoLower.includes('diafis√°ria do √∫mero')) {
        if (textoLower.includes('haste')) {
            return { categoria: 'Fratura Diafis√°ria √ömero', conduta: 'Haste Intramedular' };
        } else {
            return { categoria: 'Fratura Diafis√°ria √ömero', conduta: 'Placa e Parafusos' };
        }
    } else if (textoLower.includes('√∫mero distal') || textoLower.includes('extremidade distal do √∫mero')) {
        return { categoria: 'Fratura Extremidade Distal √ömero', conduta: 'Placa e Parafusos' };
    } else if (textoLower.includes('cabe√ßa do r√°dio')) {
        if (textoLower.includes('artroplastia')) {
            return { categoria: 'Fratura da Cabe√ßa do R√°dio', conduta: 'Artroplastia' };
        } else {
            return { categoria: 'Fratura da Cabe√ßa do R√°dio', conduta: 'Osteoss√≠ntese' };
        }
    } else if (textoLower.includes('ol√©crano')) {
        if (textoLower.includes('bursite')) {
            return { categoria: 'Bursite de Ol√©crano', conduta: 'Tratamento Cir√∫rgico' };
        } else {
            return { categoria: 'Fratura do Ol√©crano', conduta: 'Osteoss√≠ntese' };
        }
    } else if (textoLower.includes('epicondilite')) {
        if (textoLower.includes('artrosc√≥p')) {
            return { categoria: 'Epicondilite', conduta: 'Artroscopia' };
        } else {
            return { categoria: 'Epicondilite', conduta: 'Cirurgia Aberta' };
        }
    } else if (textoLower.includes('peitoral maior')) {
        return { categoria: 'Ruptura Peitoral Maior', conduta: 'Cirurgia Aberta' };
    } else if (textoLower.includes('b√≠ceps distal')) {
        return { categoria: 'Ruptura B√≠ceps Distal', conduta: 'Cirurgia Aberta' };
    } else if (textoLower.includes('antebra√ßo') && textoLower.includes('di√°fise')) {
        return { categoria: 'Fratura Ossos Antebra√ßo', conduta: 'Osteoss√≠ntese' };
    } else if (textoLower.includes('extremidade distal do r√°dio')) {
        return { categoria: 'Fratura Extremidade Distal R√°dio', conduta: 'Osteoss√≠ntese + Fios' };
    } else {
        return { categoria: 'Procedimento Ortop√©dico', conduta: 'Cirurgia Aberta' };
    }
}

// Gerar estat√≠sticas
const stats = {};
justificativas.forEach(justificativa => {
    const classificacao = classificarJustificativa(justificativa);
    const key = `${classificacao.categoria} - ${classificacao.conduta}`;
    stats[key] = (stats[key] || 0) + 1;
});

console.log('\n=== ESTAT√çSTICAS POR CATEGORIA ===');
Object.entries(stats).sort((a, b) => b[1] - a[1]).forEach(([categoria, count]) => {
    console.log(`${categoria}: ${count} justificativas`);
});

// Gerar script SQL
let sqlScript = `-- Script de importa√ß√£o de justificativas cl√≠nicas
-- Data: ${new Date().toLocaleDateString('pt-BR')}
-- Total de justificativas: ${justificativas.length}

BEGIN;

`;

justificativas.forEach((justificativa, index) => {
    const classificacao = classificarJustificativa(justificativa);
    const titulo = `${classificacao.categoria} - ${classificacao.conduta}`;
    
    // Escapar aspas simples no SQL
    const conteudoEscapado = justificativa.replace(/'/g, "''");
    const tituloEscapado = titulo.replace(/'/g, "''");
    
    sqlScript += `-- Justificativa ${index + 1}: ${titulo}
INSERT INTO clinical_justifications (title, content, category, specialty, procedure_type, is_active)
VALUES (
    '${tituloEscapado}',
    '${conteudoEscapado}',
    '${classificacao.categoria.replace(/'/g, "''")}',
    'Ortopedia e Traumatologia',
    '${classificacao.conduta.replace(/'/g, "''")}',
    true
);

`;
});

sqlScript += `COMMIT;

-- Verificar importa√ß√£o
SELECT COUNT(*) as total_justificativas FROM clinical_justifications;
SELECT category, COUNT(*) as count FROM clinical_justifications GROUP BY category ORDER BY count DESC;`;

// Salvar script SQL
fs.writeFileSync('import_clinical_justifications.sql', sqlScript, 'utf-8');
console.log('\n‚úÖ Script SQL gerado: import_clinical_justifications.sql');
console.log(`üìù Total de ${justificativas.length} justificativas processadas`);