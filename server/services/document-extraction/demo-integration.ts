import { DocumentExtractionService } from './index';

/**
 * Demonstra√ß√£o da nova arquitetura modular funcionando
 * Este arquivo mostra como a nova estrutura se integra ao sistema atual
 */

// Inst√¢ncia do novo servi√ßo
const extractionService = new DocumentExtractionService();

/**
 * Fun√ß√£o de demonstra√ß√£o que processa uma carteirinha
 * Mostra o fluxo completo: OCR ‚Üí Limpeza ‚Üí Detec√ß√£o ‚Üí Extra√ß√£o ‚Üí Resultado
 */
export async function demonstrateNewArchitecture(imageBuffer: Buffer) {
  console.log('üöÄ DEMONSTRA√á√ÉO: Nova arquitetura modular em a√ß√£o');
  console.log('=' .repeat(60));
  
  try {
    // Usar a nova arquitetura
    const result = await extractionService.processInsuranceCard(imageBuffer);
    
    console.log('üìä RESULTADO DA NOVA ARQUITETURA:');
    console.log('Success:', result.success);
    console.log('Operadora:', result.data.operadora);
    console.log('Plano:', result.data.plano);
    console.log('N√∫mero Carteirinha:', result.data.numeroCarteirinha);
    console.log('Confidence:', result.confidence.overall);
    console.log('M√©todo de Detec√ß√£o:', result.method.type);
    
    return result;
    
  } catch (error) {
    console.error('‚ùå Erro na demonstra√ß√£o:', error);
    throw error;
  }
}

/**
 * Compara√ß√£o: M√©todo atual vs Nova arquitetura
 */
export async function compareOldVsNew(imageBuffer: Buffer) {
  console.log('‚öñÔ∏è COMPARA√á√ÉO: M√©todo atual vs Nova arquitetura');
  console.log('=' .repeat(60));
  
  // Nova arquitetura (resultado estruturado)
  const newResult = await extractionService.processInsuranceCard(imageBuffer);
  
  // Compatibilidade com sistema atual (formato legacy)
  const legacyResult = await extractionService.processInsuranceCardLegacy(imageBuffer);
  
  console.log('üÜï NOVA ARQUITETURA:');
  console.log('- Estruturada e modular');
  console.log('- Confidence scores detalhados');
  console.log('- M√©todo de detec√ß√£o rastre√°vel');
  console.log('- F√°cil de estender para novas operadoras');
  
  console.log('üîß COMPATIBILIDADE LEGACY:');
  console.log('- Mant√©m interface atual');
  console.log('- Transi√ß√£o gradual poss√≠vel');
  console.log('- Sem quebra do sistema existente');
  
  return { newResult, legacyResult };
}

/**
 * Vantagens da nova estrutura
 */
export function explainArchitectureBenefits() {
  console.log('‚ú® BENEF√çCIOS DA NOVA ARQUITETURA:');
  console.log('=' .repeat(60));
  
  console.log('1. üìÅ ORGANIZA√á√ÉO MODULAR:');
  console.log('   - Cada operadora tem seu pr√≥prio extrator');
  console.log('   - C√≥digo separado por responsabilidade');
  console.log('   - F√°cil manuten√ß√£o e debugging');
  
  console.log('2. üîß ESCALABILIDADE:');
  console.log('   - Adicionar nova operadora = novo arquivo');
  console.log('   - Padr√µes reutiliz√°veis entre operadoras');
  console.log('   - Configura√ß√£o externa sem alterar c√≥digo');
  
  console.log('3. üéØ CONFIABILIDADE:');
  console.log('   - Scores de confian√ßa detalhados');
  console.log('   - Rastreamento de m√©todos de detec√ß√£o');
  console.log('   - Fallbacks autom√°ticos');
  
  console.log('4. üß™ TESTABILIDADE:');
  console.log('   - Cada componente pode ser testado isoladamente');
  console.log('   - Mocks f√°ceis para testes unit√°rios');
  console.log('   - Valida√ß√£o de cada etapa do processo');
  
  console.log('5. üîÑ COMPATIBILIDADE:');
  console.log('   - Sistema atual continua funcionando');
  console.log('   - Migra√ß√£o gradual poss√≠vel');
  console.log('   - Interface legacy mantida');
}