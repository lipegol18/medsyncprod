/**
 * Extrator especializado para carteirinhas Bradesco Sa√∫de
 * Implementa padr√µes espec√≠ficos de extra√ß√£o para documentos Bradesco
 */

import { IOperatorExtractor } from '../types/extraction-types';
import type { ExtractedData } from '../types/extraction-types';
import { CNSValidator } from '../utils/cns-validator';

export class BradescoExtractor implements IOperatorExtractor {
  /**
   * Extrai n√∫mero da carteirinha espec√≠fico do Bradesco (excluindo CNS)
   */
  extractCardNumber(text: string): string | null {
    console.log('üîç Bradesco: Extraindo n√∫mero da carteirinha...');
    
    // Remover CNS conhecido do texto para an√°lise
    const cnsNumber = CNSValidator.extractCNS(text);
    let workingText = text;
    if (cnsNumber) {
      workingText = text.replace(new RegExp(cnsNumber, 'g'), '');
    }
    
    // Padr√£o espec√≠fico para capturar n√∫mero completo com 4 grupos: 954 390 098795 004
    const bradescoCompletePattern = /(\d{3})\s+(\d{3})\s+(\d{6})\s+(\d{3})/;
    const completeMatch = workingText.match(bradescoCompletePattern);
    
    if (completeMatch) {
      const fragments = [completeMatch[1], completeMatch[2], completeMatch[3], completeMatch[4]];
      const candidateNumber = fragments.join('');
      
      console.log(`üîç Candidato completo encontrado: ${fragments.join(' ')} ‚Üí ${candidateNumber} (${candidateNumber.length} d√≠gitos)`);
      
      // Verificar se n√£o √© CNS e tem 15 d√≠gitos
      if (candidateNumber.length === 15 && !CNSValidator.isCNSNumber(candidateNumber)) {
        console.log(`‚úÖ Bradesco: N√∫mero completo da carteirinha: ${candidateNumber}`);
        return candidateNumber;
      }
    }
    
    // Fallback: padr√£o de 3 grupos sem d√≠gito verificador
    const fallbackPattern = /(\d{3})\s+(\d{3})\s+(\d{6})/;
    const fallbackMatch = workingText.match(fallbackPattern);
    
    if (fallbackMatch) {
      const fragments = [fallbackMatch[1], fallbackMatch[2], fallbackMatch[3]];
      const candidateNumber = fragments.join('');
      
      console.log(`üîç Fallback encontrado: ${fragments.join(' ')} ‚Üí ${candidateNumber} (${candidateNumber.length} d√≠gitos)`);
      
      if (candidateNumber.length === 12 && !CNSValidator.isCNSNumber(candidateNumber)) {
        console.log(`‚úÖ Bradesco: N√∫mero da carteirinha (fallback): ${candidateNumber}`);
        return candidateNumber;
      }
    }

    // Estrat√©gia 3: Buscar qualquer sequ√™ncia de 15 d√≠gitos no texto original (sem remover CNS)
    const allNumbersPattern = /\b\d{15}\b/g;
    const allMatches = text.match(allNumbersPattern);
    
    if (allMatches) {
      for (const match of allMatches) {
        if (!CNSValidator.isCNSNumber(match)) {
          console.log(`‚úÖ Bradesco: N√∫mero da carteirinha encontrado (15 d√≠gitos direto): ${match}`);
          return match;
        }
      }
    }

    console.log('‚ùå Bradesco: N√∫mero da carteirinha n√£o encontrado');
    return null;
  }

  /**
   * Extrai CNS usando utilit√°rio global
   */
  extractCNS(text: string): string | null {
    console.log('üîç Bradesco: Extraindo CNS...');
    const cns = CNSValidator.extractCNS(text);
    if (cns) {
      console.log(`‚úÖ Bradesco: CNS extra√≠do: ${cns}`);
    } else {
      console.log('‚ùå Bradesco: CNS n√£o encontrado');
    }
    return cns;
  }

  /**
   * Extrai plano espec√≠fico do Bradesco
   * Padr√µes comuns: SAUDE TOP, SAUDE ESSENCIAL, SAUDE EXECUTIVO, etc.
   */
  extractPlan(text: string): string | null {
    console.log('üîç Bradesco: Extraindo plano...');
    
    const normalizedText = text.toUpperCase();
    
    // 1. Primeiro buscar planos compostos do Bradesco (SAUDE/SA√öDE + modificador)
    const composedPlans = [
      'SAUDE TOP',
      'SA√öDE TOP',
      'SAUDE PLUS',
      'SA√öDE PLUS',
      'SAUDE PREMIUM',
      'SA√öDE PREMIUM',
      'SAUDE EXECUTIVO',
      'SA√öDE EXECUTIVO',
      'SAUDE MASTER',
      'SA√öDE MASTER',
      'SAUDE ESSENCIAL',
      'SA√öDE ESSENCIAL',
      'SAUDE CLASSICO',
      'SA√öDE CL√ÅSSICO',
      'SAUDE BASIC',
      'SA√öDE BASIC',
      'SAUDE BASICO',
      'SA√öDE BASICO',
      'SAUDE STANDARD',
      'SA√öDE STANDARD',
      'SAUDE DIAMANTE',
      'SA√öDE DIAMANTE',
      'SAUDE OURO',
      'SA√öDE OURO',
      'SAUDE PRATA',
      'SA√öDE PRATA'
    ];
    
    for (const plan of composedPlans) {
      if (normalizedText.includes(plan)) {
        console.log(`‚úÖ Bradesco: Plano composto encontrado: ${plan}`);
        // Normalizar para formato sem acento para consist√™ncia
        return plan.replace('SA√öDE', 'SAUDE');
      }
    }

    // 2. Buscar padr√µes espec√≠ficos do Bradesco com SAUDE/SA√öDE
    const saudePlanPatterns = [
      /SA√öDE\s+([A-Z√Å√ä√î√á]{2,15})/g, // SA√öDE + palavra seguinte
      /SAUDE\s+([A-Z√Å√ä√î√á]{2,15})/g, // SAUDE + palavra seguinte
      /(?:PLANO|PRODUTO|MODALIDADE)[:\s]+SA√öDE\s+([A-Z√Å√ä√î√á]{2,15})/i,
      /(?:PLANO|PRODUTO|MODALIDADE)[:\s]+SAUDE\s+([A-Z√Å√ä√î√á]{2,15})/i,
      /BRADESCO\s+SA√öDE\s+([A-Z√Å√ä√î√á]{2,15})/i,
      /BRADESCO\s+SAUDE\s+([A-Z√Å√ä√î√á]{2,15})/i,
    ];

    for (const pattern of saudePlanPatterns) {
      const match = normalizedText.match(pattern);
      if (match && match[1]) {
        const fullPlan = `SAUDE ${match[1].trim()}`;
        console.log(`‚úÖ Bradesco: Plano SAUDE encontrado via padr√£o: ${fullPlan}`);
        return fullPlan;
      }
    }

    // 3. Planos simples (fallback)
    const simplePlans = [
      'ESSENCIAL',
      'EXECUTIVO', 
      'MASTER',
      'CL√ÅSSICO',
      'CLASSICO',
      'PREMIUM',
      'PLUS',
      'BASIC',
      'BASICO',
      'STANDARD',
      'SAUDE' // Como √∫ltimo recurso
    ];
    
    for (const plan of simplePlans) {
      if (normalizedText.includes(plan)) {
        console.log(`‚úÖ Bradesco: Plano simples encontrado: ${plan}`);
        return plan;
      }
    }

    // 4. Buscar por padr√µes gen√©ricos ap√≥s palavras-chave
    const genericPlanPatterns = [
      /(?:PLANO|PRODUTO|MODALIDADE)[:\s]+([A-Z√Å√ä√î√á\s]{3,25})/i,
      /BRADESCO\s+([A-Z√Å√ä√î√á\s]{3,25})/i,
    ];

    for (const pattern of genericPlanPatterns) {
      const match = normalizedText.match(pattern);
      if (match && match[1]) {
        const planName = match[1].trim();
        if (planName.length > 2 && planName.length < 25) {
          console.log(`‚úÖ Bradesco: Plano encontrado via padr√£o gen√©rico: ${planName}`);
          return planName;
        }
      }
    }

    console.log('‚ùå Bradesco: Plano n√£o encontrado');
    return null;
  }

  /**
   * Extrai nome do titular espec√≠fico do Bradesco
   */
  extractHolderName(text: string): string | null {
    console.log('üîç Bradesco: Extraindo nome do titular...');
    
    const namePatterns = [
      /(?:TITULAR|BENEFICI√ÅRIO|NOME)[:\s]+([A-Z√Å√ä√î√á√Ä√Å√É√Ç√â√ç√ì√ö√á\s]{5,50})/i,
      /USU√ÅRIO[:\s]+([A-Z√Å√ä√î√á√Ä√Å√É√Ç√â√ç√ì√ö√á\s]{5,50})/i,
      /([A-Z√Å√ä√î√á√Ä√Å√É√Ç√â√ç√ì√ö√á]{2,}\s+[A-Z√Å√ä√î√á√Ä√Å√É√Ç√â√ç√ì√ö√á\s]{5,40})/
    ];

    for (const pattern of namePatterns) {
      const match = text.match(pattern);
      if (match && match[1]) {
        const name = match[1].trim();
        
        // Validar se parece um nome v√°lido
        if (this.isValidName(name)) {
          console.log(`‚úÖ Bradesco: Nome encontrado: ${name}`);
          return name;
        }
      }
    }

    console.log('‚ùå Bradesco: Nome do titular n√£o encontrado');
    return null;
  }

  /**
   * Calcula confian√ßa espec√≠fica para Bradesco
   */
  getConfidence(data: ExtractedData): number {
    let confidence = 0;
    let factors = 0;

    // Operadora confirmada
    if (data.operadora === 'BRADESCO') {
      confidence += 0.3;
      factors++;
    }

    // N√∫mero da carteirinha (peso maior para Bradesco)
    if (data.numeroCarteirinha) {
      if (data.numeroCarteirinha.length === 15) {
        confidence += 0.4; // Alta confian√ßa para n√∫meros de 15 d√≠gitos
      } else {
        confidence += 0.2;
      }
      factors++;
    }

    // Plano identificado
    if (data.plano) {
      confidence += 0.2;
      factors++;
    }

    // Nome do titular
    if (data.nomeTitular) {
      confidence += 0.1;
      factors++;
    }

    return factors > 0 ? confidence : 0;
  }

  /**
   * Valida se o texto extra√≠do parece um nome v√°lido
   */
  private isValidName(name: string): boolean {
    const cleanName = name.trim();
    
    // Muito curto ou muito longo
    if (cleanName.length < 5 || cleanName.length > 50) {
      return false;
    }

    // Deve ter pelo menos 2 palavras
    const words = cleanName.split(/\s+/);
    if (words.length < 2) {
      return false;
    }

    // N√£o deve conter n√∫meros ou s√≠mbolos
    if (/[0-9@#$%^&*()+=\[\]{}|\\:";'<>?,.\/]/.test(cleanName)) {
      return false;
    }

    // Palavras muito comuns que n√£o s√£o nomes
    const invalidWords = ['CARTEIRINHA', 'BRADESCO', 'SAUDE', 'PLANO', 'TITULAR', 'CPF', 'CNS'];
    const upperName = cleanName.toUpperCase();
    
    for (const invalid of invalidWords) {
      if (upperName.includes(invalid)) {
        return false;
      }
    }

    return true;
  }
}