import { FlowDebugger } from '../utils/flow-debugger';

/**
 * Passo 2: Pr√©-processamento e limpeza do texto extra√≠do
 * Normaliza o texto para facilitar a detec√ß√£o de padr√µes
 */
export class TextPreprocessor {
  
  /**
   * Executa limpeza completa do texto OCR
   * @param rawText Texto bruto extra√≠do do OCR
   * @returns string Texto limpo e normalizado
   */
  static cleanText(rawText: string): string {
    FlowDebugger.enter('text-preprocessor.ts', 'cleanText', { originalLength: rawText.length });
    
    console.log('üßπ Iniciando limpeza do texto OCR...');
    console.log('üìÑ Texto original (primeiros 200 chars):', rawText.substring(0, 200));
    
    FlowDebugger.data('text-preprocessor.ts', 'cleanText', 'Texto original preview', rawText.substring(0, 200));
    
    let cleanedText = rawText
      .toUpperCase()                                        // Converter para mai√∫sculas
      .normalize("NFD").replace(/[\u0300-\u036f]/g, "")    // Remover acentos
      .replace(/[ \t]+/g, " ")                             // Normalizar espa√ßos/tabs (preserva quebras de linha)
      .replace(/\n\s*\n/g, "\n")                           // Remove linhas vazias duplas
      .trim();                                              // Remover espa√ßos in√≠cio/fim

    FlowDebugger.data('text-preprocessor.ts', 'cleanText', 'Texto limpo', {
      originalLength: rawText.length,
      cleanedLength: cleanedText.length,
      preview: cleanedText.substring(0, 200),
      lineCount: cleanedText.split('\n').length
    });

    console.log('‚úÖ Texto limpo (primeiros 200 chars):', cleanedText.substring(0, 200));
    console.log('üìä Estat√≠sticas: Original:', rawText.length, 'chars ‚Üí Limpo:', cleanedText.length, 'chars');
    console.log('üìã Linhas preservadas:', cleanedText.split('\n').length, 'linhas');
    
    FlowDebugger.exit('text-preprocessor.ts', 'cleanText', { cleanedLength: cleanedText.length });
    return cleanedText;
  }

  /**
   * Vers√£o alternativa que preserva totalmente a estrutura de linhas
   * Para casos onde a estrutura √© cr√≠tica para extra√ß√£o
   * @param rawText Texto bruto extra√≠do do OCR
   * @returns string Texto com estrutura preservada
   */
  static cleanTextPreservingStructure(rawText: string): string {
    console.log('üßπ Limpeza preservando estrutura de linhas...');
    
    let cleanedText = rawText
      .toUpperCase()                                        // Converter para mai√∫sculas
      .normalize("NFD").replace(/[\u0300-\u036f]/g, "")    // Remover acentos
      .replace(/[ \t]+/g, " ")                             // Apenas normalizar espa√ßos horizontais
      .replace(/^\s+|\s+$/gm, "")                          // Trim cada linha individualmente
      .replace(/\n{3,}/g, "\n\n");                         // M√°ximo 2 quebras consecutivas

    console.log('‚úÖ Estrutura preservada - Linhas:', cleanedText.split('\n').length);
    return cleanedText;
  }

  /**
   * Extrai linhas do texto para an√°lise estruturada
   * @param text Texto limpo
   * @returns string[] Array de linhas n√£o vazias
   */
  static extractLines(text: string): string[] {
    const lines = text
      .split('\n')
      .map(line => line.trim())
      .filter(line => line.length > 0);
    
    console.log('üìã Extra√≠das', lines.length, 'linhas de texto');
    return lines;
  }

  /**
   * Remove caracteres especiais mantendo apenas letras, n√∫meros e espa√ßos
   * @param text Texto a ser limpo
   * @returns string Texto sem caracteres especiais
   */
  static removeSpecialCharacters(text: string): string {
    return text.replace(/[^A-Z0-9\s]/g, ' ').replace(/\s+/g, ' ').trim();
  }

  /**
   * Extrai todos os n√∫meros do texto (√∫til para an√°lise posterior)
   * @param text Texto limpo
   * @returns string[] Array com todos os n√∫meros encontrados
   */
  static extractAllNumbers(text: string): string[] {
    const numbers = text.match(/\d+/g) || [];
    console.log('üî¢ N√∫meros encontrados no texto:', numbers.length);
    return numbers;
  }

  /**
   * Cria vers√£o do texto adequada para busca de padr√µes
   * @param text Texto original
   * @returns string Texto otimizado para regex
   */
  static prepareForPatternMatching(text: string): string {
    return text
      .replace(/[\-\.\(\)\[\]]/g, ' ')  // Substituir pontua√ß√£o por espa√ßos
      .replace(/\s+/g, ' ')             // Normalizar espa√ßos
      .trim();
  }
}