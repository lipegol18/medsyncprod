/**
 * Passo 3: Extra√ß√£o do c√≥digo ANS (identificador √∫nico da operadora)
 * O c√≥digo ANS √© o identificador oficial das operadoras de sa√∫de no Brasil
 */
export class ANSDetector {
  
  /**
   * Extrai c√≥digo ANS do texto limpo
   * @param cleanText Texto pr√©-processado
   * @returns string | null C√≥digo ANS encontrado ou null
   */
  static extractANSCode(cleanText: string): string | null {
    console.log('üîç Buscando c√≥digo ANS no texto...');
    
    // Padr√µes para detectar c√≥digo ANS (5-7 d√≠gitos)
    const ansPatterns = [
      // Padr√£o ANS - n¬∞ 00.070-1 (formato com pontos e h√≠fen)
      /ANS\s*-\s*N[¬∫O¬∞]?\s*(\d{2})\.(\d{3})-(\d{1})/i,
      // Padr√£o ANS-n¬∞ 000701 (6 d√≠gitos diretos)
      /ANS\s*-\s*N[¬∫O¬∞]?\s*(\d{6})(?!\d)/i,
      // Padr√£o ANS: 000701 (dois pontos)
      /ANS\s*:\s*(\d{5,7})(?!\d)/i,
      // Padr√£o ANS 000701 (espa√ßo simples)
      /(?:^|\s)ANS\s+(\d{5,7})(?!\d)/i,
      // Padr√£o n¬∞ ANS: 000701
      /N[¬∫O¬∞]?\s*ANS\s*:\s*(\d{5,7})(?!\d)/i,
      // Padr√£o NUMERO ANS ou N√öMERO ANS
      /(?:NUMERO|N√öMERO)\s*ANS\s*[:\s]*(\d{5,7})(?!\d)/i,
      // Padr√£o REGISTRO ANS
      /REGISTRO\s*ANS\s*[:\s]*(\d{5,7})(?!\d)/i,
      // Padr√£o CODIGO ANS ou C√ìDIGO ANS
      /(?:CODIGO|C√ìDIGO)\s*ANS\s*[:\s]*(\d{5,7})(?!\d)/i
    ];
    
    for (const pattern of ansPatterns) {
      console.log('üîç Testando padr√£o ANS:', pattern.source);
      const match = cleanText.match(pattern);
      
      if (match) {
        let ansCode = '';
        
        if (match[1] && match[2] && match[3]) {
          // Formato XX.XXX-X -> combinar os grupos
          ansCode = match[1] + match[2] + match[3];
          console.log('üìã ANS formato estruturado encontrado:', match[1], match[2], match[3], '‚Üí', ansCode);
        } else if (match[1] && match[1].length >= 5) {
          // Formato direto de 5-7 d√≠gitos
          ansCode = match[1];
          console.log('üìã ANS formato direto encontrado:', ansCode);
        }
        
        if (ansCode && this.isValidANSCode(ansCode)) {
          console.log('‚úÖ C√≥digo ANS v√°lido encontrado:', ansCode);
          return ansCode;
        }
      }
    }
    
    console.log('‚ùå Nenhum c√≥digo ANS encontrado no texto');
    return null;
  }

  /**
   * Valida se um c√≥digo ANS tem formato correto
   * @param code C√≥digo a ser validado
   * @returns boolean True se v√°lido
   */
  private static isValidANSCode(code: string): boolean {
    // C√≥digo ANS deve ter entre 5-7 d√≠gitos e n√£o ser sequ√™ncia repetitiva
    if (code.length < 5 || code.length > 7) {
      return false;
    }
    
    // Verificar se n√£o √© sequ√™ncia repetitiva (ex: 11111)
    const uniqueDigits = new Set(code).size;
    if (uniqueDigits <= 2 && code.length > 4) {
      console.log('‚ö†Ô∏è C√≥digo ANS rejeitado (sequ√™ncia repetitiva):', code);
      return false;
    }
    
    return true;
  }

  /**
   * Normaliza c√≥digo ANS removendo zeros √† esquerda se necess√°rio
   * @param ansCode C√≥digo ANS bruto
   * @returns string C√≥digo normalizado
   */
  static normalizeANSCode(ansCode: string): string {
    // Remove zeros √† esquerda, mas mant√©m pelo menos 4 d√≠gitos
    const normalized = ansCode.replace(/^0+/, '') || '0';
    
    if (normalized.length < 4) {
      return ansCode; // Retorna original se ficar muito curto
    }
    
    console.log('üîÑ C√≥digo ANS normalizado:', ansCode, '‚Üí', normalized);
    return normalized;
  }
}