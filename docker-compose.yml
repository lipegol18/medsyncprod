version: '3.8'

services:
  # Aplicação MedSync
  medsync-app:
    build: .
    container_name: medsync-app
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=production
      - PORT=5000
      - DATABASE_URL=${DATABASE_URL}
      - SESSION_SECRET=${SESSION_SECRET}
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
      - SENDGRID_FROM_EMAIL=${SENDGRID_FROM_EMAIL}
      - GOOGLE_CLOUD_VISION_KEY=${GOOGLE_CLOUD_VISION_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - WEBHOOK_URL=${WEBHOOK_URL}
      - APP_NAME=MedSync
      - APP_VERSION=1.0.0
    volumes:
      - uploads:/app/uploads
      - ./public:/app/public:ro
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
    networks:
      - medsync-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Banco de dados PostgreSQL
  postgres:
    image: postgres:16-alpine
    container_name: medsync-postgres
    environment:
      - POSTGRES_DB=medsync
      - POSTGRES_USER=${POSTGRES_USER:-medsync}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups:ro
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - medsync-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-medsync} -d medsync"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis para cache e sessões
  redis:
    image: redis:7-alpine
    container_name: medsync-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - medsync-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Nginx como proxy reverso (opcional)
  nginx:
    image: nginx:alpine
    container_name: medsync-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - medsync-app
    restart: unless-stopped
    networks:
      - medsync-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  uploads:
    driver: local

networks:
  medsync-network:
    driver: bridge