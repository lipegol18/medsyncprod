/**
 * Teste direto da corre√ß√£o de extra√ß√£o de nome
 * Verifica se a nova estrat√©gia "nome ap√≥s FILIA√á√ÉO" funciona
 */

// Simular a classe RGAntigoUnificadoExtractor com apenas a fun√ß√£o de extra√ß√£o de nome
class TestNameExtractor {
  
  extractFullName(text) {
    console.log('üîç Iniciando extra√ß√£o de nome...');
    
    const lines = text.split('\n').map(line => line.trim()).filter(line => line.length > 0);
    console.log('üìã Total de linhas:', lines.length);
    
    // Estrat√©gia espec√≠fica: Nome ap√≥s "FILIA√á√ÉO" (layout SP)
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i].toUpperCase().trim();
      if (line === 'FILIA√á√ÉO') {
        console.log(`üîç Campo FILIA√á√ÉO encontrado na linha ${i}`);
        // O nome est√° na primeira linha ap√≥s FILIA√á√ÉO
        if (i + 1 < lines.length) {
          const nextLine = lines[i + 1].trim();
          console.log(`   Analisando primeira linha ap√≥s FILIA√á√ÉO: "${nextLine}"`);
          
          if (this.isValidName(nextLine) && nextLine.length > 5) {
            console.log('‚úÖ Nome encontrado ap√≥s FILIA√á√ÉO:', nextLine);
            return this.formatName(nextLine);
          }
        }
      }
    }
    
    console.log('‚ùå Nome n√£o encontrado');
    return null;
  }
  
  isValidName(text) {
    if (!text || text.length < 3) return false;
    
    // Nome deve conter apenas letras, espa√ßos e alguns caracteres especiais
    if (!/^[A-Z√Ä-√ø\s\-'\.]+$/i.test(text)) return false;
    
    // Deve ter pelo menos 2 palavras (nome e sobrenome)
    const words = text.trim().split(/\s+/);
    if (words.length < 2) return false;
    
    // Palavras muito curtas n√£o s√£o v√°lidas
    if (words.some(word => word.length < 2)) return false;
    
    // Evitar palavras-chave de documentos
    const keywords = ['REP√öBLICA', 'FEDERATIVA', 'BRASIL', 'ESTADO', 'SECRETARIA', 'SEGURAN√áA', 'P√öBLICA', 'INSTITUTO', 'IDENTIFICA√á√ÉO', 'CARTEIRA', 'IDENTIDADE', 'REGISTRO', 'GERAL', 'FILIA√á√ÉO', 'NATURALIDADE', 'V√ÅLIDA', 'TERRIT√ìRIO', 'NACIONAL', 'CPF', 'DATA', 'NASCIMENTO', 'EXPEDI√á√ÉO'];
    const upperText = text.toUpperCase();
    if (keywords.some(keyword => upperText.includes(keyword))) return false;
    
    return true;
  }
  
  formatName(name) {
    return name.toUpperCase().trim();
  }
}

// Texto de teste com o padr√£o problem√°tico
const textoTeste = `REP√öBLICA FEDERATIVA DO BRASIL
ESTADO DE S√ÉO PAULO
SECRETARIA DA SEGURAN√áA P√öBLICA
INSTITUTO DE IDENTIFICA√á√ÉO RICARDO GUMBLETON DAUNT
8000-2
POLEGAR DIREITO
8617-019195
ASSINATURA DO TITULAR
0300 CARTEIRA DE IDENTIDADE
REGISTRO
GERAL
CIFA
PROIBIDO PLASTIFICAR
DATA DE
EXPEDI√á√ÉO 21/DEZ/2012
O V√ÅLIDA EM TODO O TERRIT√ìRIO NACIONAL
48.151.623-42
NOME
FILIA√á√ÉO
DANIEL COELHO DA COSTA
ROSA COELHO DA COSTA
EDIVALDO DA COSTA
NATURALIDADE
S√ÉO PAULO - SP
DOC. ORIGEM S√ÉO PAULO - SP
CPF
XXXXXXXXXXXXXXXXXXXXXXX
DATA DE NASCIMENTO
19/DEZ/1980
CART√ìRIO XXXXXXXXXXXXXXXXXX
342.002.171-42
ASSINATURA DO DIRETOR
LEIN 7.116 DE 29/08/88`;

// Executar teste
console.log('üß™ Testando corre√ß√£o da extra√ß√£o de nome...\n');

const extractor = new TestNameExtractor();
const nomeExtraido = extractor.extractFullName(textoTeste);

console.log('\nüìã RESULTADO:');
console.log('Nome extra√≠do:', nomeExtraido);
console.log('Status:', nomeExtraido ? '‚úÖ SUCESSO' : '‚ùå FALHA');

if (nomeExtraido === 'DANIEL COELHO DA COSTA') {
  console.log('üéâ Corre√ß√£o funcionou perfeitamente!');
} else {
  console.log('‚ö†Ô∏è Corre√ß√£o precisa de ajustes');
}