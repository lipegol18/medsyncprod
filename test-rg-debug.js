/**
 * Teste para debug da detec√ß√£o de nome em RG
 * Usando o texto exato que foi extra√≠do nos logs anteriores
 */

const textoRGExtraido = `REP√öBLICA FEDERATIVA DO BRASIL
ESTADO DE S√ÉO PAULO
SECRETARIA DA SEGURAN√áA P√öBLICA
INSTITUTO DE IDENTIFICA√á√ÉO RICARDO GUMBLETON DAUNT
8000-2
POLEGAR DIREITO
8617-019195
ASSINATURA DO TITULAR
0300 CARTEIRA DE IDENTIDADE
REGISTRO
GERAL
CIFA
PROIBIDO PLASTIFICAR
DATA DE
EXPEDI√á√ÉO 21/DEZ/2012
O V√ÅLIDA EM TODO O TERRIT√ìRIO NACIONAL
48.151.623-42
NOME
FILIA√á√ÉO
DANIEL COELHO DA COSTA
ROSA COELHO DA COSTA
EDIVALDO DA COSTA
NATURALIDADE
S√ÉO PAULO - SP
DOC. ORIGEM S√ÉO PAULO - SP
CPF
XXXXXXXXXXXXXXXXXXXXXXX
DATA DE NASCIMENTO
19/DEZ/1980
CART√ìRIO XXXXXXXXXXXXXXXXXX
342.002.171-42
ASSINATURA DO DIRETOR
LEIN 7.116 DE 29/08/88`;

// Simular extra√ß√£o de nome com estrat√©gias existentes
function debugNomeExtraction(text) {
  console.log('üîç DEBUG: Analisando extra√ß√£o de nome...');
  console.log('üìÑ Texto completo:');
  console.log('=====================================');
  console.log(text);
  console.log('=====================================\n');
  
  const lines = text.split('\n').map(line => line.trim()).filter(line => line.length > 0);
  console.log('üìã Linhas extra√≠das:', lines);
  console.log('');
  
  // Estrat√©gia 1: Campo expl√≠cito "NOME:"
  console.log('üîç Estrat√©gia 1: Campo expl√≠cito "NOME:"');
  for (let i = 0; i < lines.length; i++) {
    const line = lines[i].toUpperCase();
    if (line.startsWith('NOME:') || line.startsWith('NOME ') || line === 'NOME') {
      console.log(`   Linha ${i}: "${line}" - MATCH`);
      if (i + 1 < lines.length) {
        const nextLine = lines[i + 1];
        console.log(`   Pr√≥xima linha: "${nextLine}"`);
        if (isValidName(nextLine)) {
          console.log(`   ‚úÖ NOME ENCONTRADO: ${nextLine}`);
          return nextLine;
        }
      }
    }
  }
  
  // Estrat√©gia 2: Nome antes de "FILIA√á√ÉO"
  console.log('\nüîç Estrat√©gia 2: Nome antes de "FILIA√á√ÉO"');
  for (let i = 0; i < lines.length; i++) {
    const line = lines[i].toUpperCase();
    if (line.includes('FILIA√á√ÉO')) {
      console.log(`   Linha ${i}: "${line}" - FILIA√á√ÉO encontrada`);
      // Verificar 3 linhas anteriores
      for (let j = Math.max(0, i - 3); j < i; j++) {
        const prevLine = lines[j].trim();
        console.log(`     Linha anterior ${j}: "${prevLine}"`);
        if (isValidName(prevLine) && prevLine.length > 5) {
          console.log(`   ‚úÖ NOME ENCONTRADO: ${prevLine}`);
          return prevLine;
        }
      }
    }
  }
  
  // Estrat√©gia 3: Nome ap√≥s n√∫mero do RG
  console.log('\nüîç Estrat√©gia 3: Nome ap√≥s n√∫mero do RG');
  for (let i = 0; i < lines.length; i++) {
    const line = lines[i].trim();
    if (/^\d{2}\.?\d{3}\.?\d{3}[-]?\d{1,2}$/.test(line)) {
      console.log(`   Linha ${i}: "${line}" - RG encontrado`);
      if (i + 1 < lines.length) {
        const nextLine = lines[i + 1].trim();
        console.log(`     Pr√≥xima linha: "${nextLine}"`);
        if (isValidName(nextLine)) {
          console.log(`   ‚úÖ NOME ENCONTRADO: ${nextLine}`);
          return nextLine;
        }
      }
    }
  }
  
  // Estrat√©gia NOVA: Nome ap√≥s "FILIA√á√ÉO" (layout SP espec√≠fico)
  console.log('\nüîç Estrat√©gia NOVA: Nome ap√≥s "FILIA√á√ÉO"');
  for (let i = 0; i < lines.length; i++) {
    const line = lines[i].toUpperCase().trim();
    if (line === 'FILIA√á√ÉO') {
      console.log(`   Linha ${i}: "${line}" - Campo FILIA√á√ÉO encontrado`);
      // O nome est√° na primeira linha ap√≥s FILIA√á√ÉO
      if (i + 1 < lines.length) {
        const nextLine = lines[i + 1].trim();
        console.log(`     Analisando primeira linha ap√≥s FILIA√á√ÉO: "${nextLine}"`);
        
        if (isValidName(nextLine) && nextLine.length > 5) {
          console.log(`   ‚úÖ NOME ENCONTRADO: ${nextLine}`);
          return nextLine;
        }
      }
    }
  }
  
  console.log('\n‚ùå NOME N√ÉO ENCONTRADO');
  return null;
}

function isValidName(text) {
  if (!text || text.length < 3) return false;
  
  // Nome deve conter apenas letras, espa√ßos e alguns caracteres especiais
  if (!/^[A-Z√Ä-√ø\s\-'\.]+$/i.test(text)) return false;
  
  // Deve ter pelo menos 2 palavras (nome e sobrenome)
  const words = text.trim().split(/\s+/);
  if (words.length < 2) return false;
  
  // Palavras muito curtas n√£o s√£o v√°lidas
  if (words.some(word => word.length < 2)) return false;
  
  // Evitar palavras-chave de documentos
  const keywords = ['REP√öBLICA', 'FEDERATIVA', 'BRASIL', 'ESTADO', 'SECRETARIA', 'SEGURAN√áA', 'P√öBLICA', 'INSTITUTO', 'IDENTIFICA√á√ÉO', 'CARTEIRA', 'IDENTIDADE', 'REGISTRO', 'GERAL', 'FILIA√á√ÉO', 'NATURALIDADE', 'V√ÅLIDA', 'TERRIT√ìRIO', 'NACIONAL', 'CPF', 'DATA', 'NASCIMENTO', 'EXPEDI√á√ÉO'];
  const upperText = text.toUpperCase();
  if (keywords.some(keyword => upperText.includes(keyword))) return false;
  
  return true;
}

// Executar teste
const nomeEncontrado = debugNomeExtraction(textoRGExtraido);
console.log('\nüìã RESULTADO FINAL:');
console.log('Nome encontrado:', nomeEncontrado || 'N√ÉO ENCONTRADO');